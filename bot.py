import api
import algorithms
import time

TURN_TIME = 2

class Bot:
    def __init__(self) -> None:
        self._Base = algorithms.Base()
        self._Attack = algorithms.Attack()
        self._world = {}
        self._units = {}
        self._head = {}

    @property
    def gold(self):
        """–£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã."""
        if "player" in self._units:
            return self._units["player"]["gold"]
        return 0

    @property
    def health(self):
        """–§—É–ª–ª —Ö–ø."""
        hp = 0
        for cell in self._units.get("base", []) or []:
            hp += cell["health"]
        return hp

    @property
    def size(self):
        """–†–∞–∑–º–µ—Ä –±–∞–∑—ã."""
        return len(self._units.get("base", []) or [])

    @property
    def turn(self):
        """–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ö–æ–¥."""
        if "turn" in self._units:
            return self._units["turn"]
        return 0
    
    @property
    def turn_ends_in_ms(self):
        """–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞."""
        if "turn" in self._units:
            return self._units["turnEndsInMs"]
        return TURN_TIME
    
    def refresh(self):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞."""
        if len(self._world.keys()) == 0 or "error" in self._world:
            self._world = api.world()
        self._units = api.units()
        # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≥–æ–ª–æ–≤—ã.
        if len(self._head.keys()) == 0:
            for cell in self._units.get("base", []) or []:
                if "isHead" in cell:
                    self._head = cell

    def base(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –±–∞–∑—ã."""
        try:
            return self._Base.update(units=self._units, world=self._world, head=self._head)
        except:
            return None

    def attack(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞—Ç–∞–∫–∏."""
        try:
            return self._Attack.update(units=self._units)
        except:
            return None
        
    def move(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–∞–∑—ã."""
        try:
            return algorithms.move()
        except:
            return None

    def commit(self, *, attack=None, build=None, move_base=None):
        """–°–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞."""
        request_data = {}
        if attack:
            request_data["attack"] = attack
        if build:
            request_data["build"] = build
        if move_base:
            request_data["moveBase"] = move_base
        api.command(request_data)

    def print_status(self):
        print(f"[ {self.turn} ] ‚ù§Ô∏è  = {self.health}, ü™ô  = {self.gold}, üè†  = {self.size}")

    def go(self):
        while True:
            self.refresh()
            start = time.monotonic()

            build = self.base()
            attack = self.attack()
            move = self.move()
            self.commit(attack=attack, build=build, move_base=move)
            self.print_status()
            
            end = time.monotonic() - start
            sleep_time = (self.turn_ends_in_ms - end) % TURN_TIME
            print(f"‚àü timing: {end:.3}s, {sleep_time=:.3}s")
            time.sleep(sleep_time)